const PROBLEMS = [{"group":"arrays-and-strings","problems":[{"title":"Largest Number In Array","description":"Return the largest number when passed an array of numbers","functionName":"getMax","parameters":["numbers"],"tests":[{"0":[2,4,6],"return":6},{"0":[3,1],"return":3},{"0":[-3,-1],"return":-1},{"0":[],"return":null},{"0":[9],"return":9}],"solutions":["function getMax (numbers)\n{\n  let max = null;\n  for (let i = 0; i < numbers.length; i++) {\n    if (max === null || numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n","const getMax = (numbers) => (\n  numbers.reduce((max, num) => (\n    (max === null || num > max)\n      ? num\n      : max\n  ), null)\n);"]},{"title":"Sum of Numbers In Array","description":"Return the sum of all numbers in an array.","functionName":"getSum","parameters":["numbers"],"tests":[{"0":[2,4,6],"return":12},{"0":[1,3],"return":4},{"0":[9],"return":9}],"solutions":["function getSum (arrayOfNumbers)\n{\n  let sum = 0;\n  for (let i = 0; i < arrayOfNumbers.length; i++) {\n    sum += arrayOfNumbers[i];\n  }\n  return sum;\n}\n","const getSum = (arrayOfNumbers) => {\n  let sum = 0;\n  // Use `forEach` iterator to add each sum\n  arrayOfNumbers.forEach((number) => {\n    sum += number;    \n  });\n  return sum;\n};\n","const getSum = (arrayOfNumbers) => (  // Use arrow functions with `()` to automatically return\n  // Use `reduce` to iterate over all numbers, adding them to the sum.  Explanation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=example\n  arrayOfNumbers.reduce((sum, num) => (sum + num), 0)\n);\n"]}]},{"group":"javascript-syntax","problems":[{"title":"Number 24","description":"Write a function named `number24` which always returns 24","functionName":"number24","parameters":[],"tests":[{"return":24}],"solutions":["function number24 ()\n{\n  return 24;\n}\n","const number24 = () => 24;\n// Special arrow function syntax.  If no `{}` after `=>`, automatically returns value;"]}]}]; (function deepFreeze (obj) { var propNames = Object.getOwnPropertyNames(obj); propNames.forEach(function(name) { var prop = obj[name]; if (typeof prop == 'object' && prop !== null) { deepFreeze(prop); } }); return Object.freeze(obj); })(PROBLEMS);